INVERSION COUNT PROBLEM
Given an array of integers. Find the Inversion Count in the array.  Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.
Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.
Constraints:
1 â‰¤ arr.size() â‰¤ 105
1 â‰¤ arr[i] â‰¤ 104


PROGRAM:-
# Function to merge two halves and count inversions
def mergeAndCount(arr, temp_arr, left, mid, right):
    i = left    # Starting index for left subarray
    j = mid + 1 # Starting index for right subarray
    k = left    # Starting index to be sorted
    inv_count = 0
    
    # Merge the two subarrays
    while i <= mid and j <= right:
        if arr[i] <= arr[j]:
            temp_arr[k] = arr[i]
            i += 1
        else:
            temp_arr[k] = arr[j]
            inv_count += (mid - i + 1)  # All elements left in left subarray are greater than arr[j]
            j += 1
        k += 1
    
    # Copy the remaining elements of left subarray (if any)
    while i <= mid:
        temp_arr[k] = arr[i]
        i += 1
        k += 1
    
    # Copy the remaining elements of right subarray (if any)
    while j <= right:
        temp_arr[k] = arr[j]
        j += 1
        k += 1
    
    # Copy the sorted subarray into original array
    for i in range(left, right + 1):
        arr[i] = temp_arr[i]
    
    return inv_count

# Function to use merge sort and count inversions
def mergeSortAndCount(arr, temp_arr, left, right):
    inv_count = 0
    if left < right:
        mid = (left + right) // 2

        inv_count += mergeSortAndCount(arr, temp_arr, left, mid)      # Left subarray inversions
        inv_count += mergeSortAndCount(arr, temp_arr, mid + 1, right) # Right subarray inversions

        inv_count += mergeAndCount(arr, temp_arr, left, mid, right)   # Merge and count cross inversions
    
    return inv_count

# Function to get user input and find inversion count
def getInversionCount():
    n = int(input("Enter the size of the array: "))
    arr = list(map(int, input("Enter the elements of the array separated by space: ").split()))

    if len(arr) != n:
        print("Error: The number of elements does not match the specified size.")
        return
    
    temp_arr = [0] * n  # Temporary array for merge sort
    result = mergeSortAndCount(arr, temp_arr, 0, n - 1)
    print(f"Inversion Count: {result}")

# Call the function to get user input and find inversion count
getInversionCount()

EXPLANATION:-
In this approach, we modify the merge sort algorithm to count the number of inversions. While merging two halves, if an element from the right half is smaller than an element from the left half, it means that all the elements remaining in the left half will form inversions with that element from the right half.













-----------------------------------------------------------------------------------------------------------------------------------------------------------------